//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LibNews", Namespace="http://schemas.datacontract.org/2004/07/NewsServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class LibNews : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int RefIdRestField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ReleaseDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TextContentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TitleField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RefIdRest {
            get {
                return this.RefIdRestField;
            }
            set {
                if ((this.RefIdRestField.Equals(value) != true)) {
                    this.RefIdRestField = value;
                    this.RaisePropertyChanged("RefIdRest");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ReleaseDate {
            get {
                return this.ReleaseDateField;
            }
            set {
                if ((this.ReleaseDateField.Equals(value) != true)) {
                    this.ReleaseDateField = value;
                    this.RaisePropertyChanged("ReleaseDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TextContent {
            get {
                return this.TextContentField;
            }
            set {
                if ((object.ReferenceEquals(this.TextContentField, value) != true)) {
                    this.TextContentField = value;
                    this.RaisePropertyChanged("TextContent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Title {
            get {
                return this.TitleField;
            }
            set {
                if ((object.ReferenceEquals(this.TitleField, value) != true)) {
                    this.TitleField = value;
                    this.RaisePropertyChanged("Title");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LibCategory", Namespace="http://schemas.datacontract.org/2004/07/NewsServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class LibCategory : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdCatField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameCatField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IdCat {
            get {
                return this.IdCatField;
            }
            set {
                if ((this.IdCatField.Equals(value) != true)) {
                    this.IdCatField = value;
                    this.RaisePropertyChanged("IdCat");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameCat {
            get {
                return this.NameCatField;
            }
            set {
                if ((object.ReferenceEquals(this.NameCatField, value) != true)) {
                    this.NameCatField = value;
                    this.RaisePropertyChanged("NameCat");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.INewsService")]
    public interface INewsService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/CreateNews", ReplyAction="http://tempuri.org/INewsService/CreateNewsResponse")]
        void CreateNews(Client.ServiceReference1.LibNews news);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/CreateNews", ReplyAction="http://tempuri.org/INewsService/CreateNewsResponse")]
        System.Threading.Tasks.Task CreateNewsAsync(Client.ServiceReference1.LibNews news);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/CreateCategory", ReplyAction="http://tempuri.org/INewsService/CreateCategoryResponse")]
        void CreateCategory(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/CreateCategory", ReplyAction="http://tempuri.org/INewsService/CreateCategoryResponse")]
        System.Threading.Tasks.Task CreateCategoryAsync(string title);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/CreateCategoryForNews", ReplyAction="http://tempuri.org/INewsService/CreateCategoryForNewsResponse")]
        void CreateCategoryForNews(int idCat, int idNews);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/CreateCategoryForNews", ReplyAction="http://tempuri.org/INewsService/CreateCategoryForNewsResponse")]
        System.Threading.Tasks.Task CreateCategoryForNewsAsync(int idCat, int idNews);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/DeleteCategoryForNews", ReplyAction="http://tempuri.org/INewsService/DeleteCategoryForNewsResponse")]
        void DeleteCategoryForNews(int idCat, int idNews);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/DeleteCategoryForNews", ReplyAction="http://tempuri.org/INewsService/DeleteCategoryForNewsResponse")]
        System.Threading.Tasks.Task DeleteCategoryForNewsAsync(int idCat, int idNews);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/DeleteCategorysForNews", ReplyAction="http://tempuri.org/INewsService/DeleteCategorysForNewsResponse")]
        void DeleteCategorysForNews(int idNews);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/DeleteCategorysForNews", ReplyAction="http://tempuri.org/INewsService/DeleteCategorysForNewsResponse")]
        System.Threading.Tasks.Task DeleteCategorysForNewsAsync(int idNews);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/DeleteCategoryFromAllNews", ReplyAction="http://tempuri.org/INewsService/DeleteCategoryFromAllNewsResponse")]
        void DeleteCategoryFromAllNews(int idCat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/DeleteCategoryFromAllNews", ReplyAction="http://tempuri.org/INewsService/DeleteCategoryFromAllNewsResponse")]
        System.Threading.Tasks.Task DeleteCategoryFromAllNewsAsync(int idCat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/DeleteCategory", ReplyAction="http://tempuri.org/INewsService/DeleteCategoryResponse")]
        void DeleteCategory(string nameCat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/DeleteCategory", ReplyAction="http://tempuri.org/INewsService/DeleteCategoryResponse")]
        System.Threading.Tasks.Task DeleteCategoryAsync(string nameCat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/DeleteNews", ReplyAction="http://tempuri.org/INewsService/DeleteNewsResponse")]
        void DeleteNews(string title, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/DeleteNews", ReplyAction="http://tempuri.org/INewsService/DeleteNewsResponse")]
        System.Threading.Tasks.Task DeleteNewsAsync(string title, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/SelectNewsFromCategory", ReplyAction="http://tempuri.org/INewsService/SelectNewsFromCategoryResponse")]
        Client.ServiceReference1.LibNews[] SelectNewsFromCategory(string nameCat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/SelectNewsFromCategory", ReplyAction="http://tempuri.org/INewsService/SelectNewsFromCategoryResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.LibNews[]> SelectNewsFromCategoryAsync(string nameCat);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/SelectAllNews", ReplyAction="http://tempuri.org/INewsService/SelectAllNewsResponse")]
        Client.ServiceReference1.LibNews[] SelectAllNews();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/SelectAllNews", ReplyAction="http://tempuri.org/INewsService/SelectAllNewsResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.LibNews[]> SelectAllNewsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/SelectAllCategory", ReplyAction="http://tempuri.org/INewsService/SelectAllCategoryResponse")]
        Client.ServiceReference1.LibCategory[] SelectAllCategory();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/SelectAllCategory", ReplyAction="http://tempuri.org/INewsService/SelectAllCategoryResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.LibCategory[]> SelectAllCategoryAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/Test", ReplyAction="http://tempuri.org/INewsService/TestResponse")]
        void Test();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/Test", ReplyAction="http://tempuri.org/INewsService/TestResponse")]
        System.Threading.Tasks.Task TestAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/CreateNewWithCat", ReplyAction="http://tempuri.org/INewsService/CreateNewWithCatResponse")]
        void CreateNewWithCat(Client.ServiceReference1.LibNews news, string[] categoryes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/CreateNewWithCat", ReplyAction="http://tempuri.org/INewsService/CreateNewWithCatResponse")]
        System.Threading.Tasks.Task CreateNewWithCatAsync(Client.ServiceReference1.LibNews news, string[] categoryes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/CreateNewWithCatAndRest", ReplyAction="http://tempuri.org/INewsService/CreateNewWithCatAndRestResponse")]
        void CreateNewWithCatAndRest(Client.ServiceReference1.LibNews news, string[] categoryes, string nameRest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/CreateNewWithCatAndRest", ReplyAction="http://tempuri.org/INewsService/CreateNewWithCatAndRestResponse")]
        System.Threading.Tasks.Task CreateNewWithCatAndRestAsync(Client.ServiceReference1.LibNews news, string[] categoryes, string nameRest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/SelectNewsFromRestoran", ReplyAction="http://tempuri.org/INewsService/SelectNewsFromRestoranResponse")]
        Client.ServiceReference1.LibNews[] SelectNewsFromRestoran(string nameRest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/SelectNewsFromRestoran", ReplyAction="http://tempuri.org/INewsService/SelectNewsFromRestoranResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference1.LibNews[]> SelectNewsFromRestoranAsync(string nameRest);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/SelectRestorans", ReplyAction="http://tempuri.org/INewsService/SelectRestoransResponse")]
        string[] SelectRestorans();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INewsService/SelectRestorans", ReplyAction="http://tempuri.org/INewsService/SelectRestoransResponse")]
        System.Threading.Tasks.Task<string[]> SelectRestoransAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INewsServiceChannel : Client.ServiceReference1.INewsService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NewsServiceClient : System.ServiceModel.ClientBase<Client.ServiceReference1.INewsService>, Client.ServiceReference1.INewsService {
        
        public NewsServiceClient() {
        }
        
        public NewsServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public NewsServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewsServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public NewsServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void CreateNews(Client.ServiceReference1.LibNews news) {
            base.Channel.CreateNews(news);
        }
        
        public System.Threading.Tasks.Task CreateNewsAsync(Client.ServiceReference1.LibNews news) {
            return base.Channel.CreateNewsAsync(news);
        }
        
        public void CreateCategory(string title) {
            base.Channel.CreateCategory(title);
        }
        
        public System.Threading.Tasks.Task CreateCategoryAsync(string title) {
            return base.Channel.CreateCategoryAsync(title);
        }
        
        public void CreateCategoryForNews(int idCat, int idNews) {
            base.Channel.CreateCategoryForNews(idCat, idNews);
        }
        
        public System.Threading.Tasks.Task CreateCategoryForNewsAsync(int idCat, int idNews) {
            return base.Channel.CreateCategoryForNewsAsync(idCat, idNews);
        }
        
        public void DeleteCategoryForNews(int idCat, int idNews) {
            base.Channel.DeleteCategoryForNews(idCat, idNews);
        }
        
        public System.Threading.Tasks.Task DeleteCategoryForNewsAsync(int idCat, int idNews) {
            return base.Channel.DeleteCategoryForNewsAsync(idCat, idNews);
        }
        
        public void DeleteCategorysForNews(int idNews) {
            base.Channel.DeleteCategorysForNews(idNews);
        }
        
        public System.Threading.Tasks.Task DeleteCategorysForNewsAsync(int idNews) {
            return base.Channel.DeleteCategorysForNewsAsync(idNews);
        }
        
        public void DeleteCategoryFromAllNews(int idCat) {
            base.Channel.DeleteCategoryFromAllNews(idCat);
        }
        
        public System.Threading.Tasks.Task DeleteCategoryFromAllNewsAsync(int idCat) {
            return base.Channel.DeleteCategoryFromAllNewsAsync(idCat);
        }
        
        public void DeleteCategory(string nameCat) {
            base.Channel.DeleteCategory(nameCat);
        }
        
        public System.Threading.Tasks.Task DeleteCategoryAsync(string nameCat) {
            return base.Channel.DeleteCategoryAsync(nameCat);
        }
        
        public void DeleteNews(string title, System.DateTime date) {
            base.Channel.DeleteNews(title, date);
        }
        
        public System.Threading.Tasks.Task DeleteNewsAsync(string title, System.DateTime date) {
            return base.Channel.DeleteNewsAsync(title, date);
        }
        
        public Client.ServiceReference1.LibNews[] SelectNewsFromCategory(string nameCat) {
            return base.Channel.SelectNewsFromCategory(nameCat);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.LibNews[]> SelectNewsFromCategoryAsync(string nameCat) {
            return base.Channel.SelectNewsFromCategoryAsync(nameCat);
        }
        
        public Client.ServiceReference1.LibNews[] SelectAllNews() {
            return base.Channel.SelectAllNews();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.LibNews[]> SelectAllNewsAsync() {
            return base.Channel.SelectAllNewsAsync();
        }
        
        public Client.ServiceReference1.LibCategory[] SelectAllCategory() {
            return base.Channel.SelectAllCategory();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.LibCategory[]> SelectAllCategoryAsync() {
            return base.Channel.SelectAllCategoryAsync();
        }
        
        public void Test() {
            base.Channel.Test();
        }
        
        public System.Threading.Tasks.Task TestAsync() {
            return base.Channel.TestAsync();
        }
        
        public void CreateNewWithCat(Client.ServiceReference1.LibNews news, string[] categoryes) {
            base.Channel.CreateNewWithCat(news, categoryes);
        }
        
        public System.Threading.Tasks.Task CreateNewWithCatAsync(Client.ServiceReference1.LibNews news, string[] categoryes) {
            return base.Channel.CreateNewWithCatAsync(news, categoryes);
        }
        
        public void CreateNewWithCatAndRest(Client.ServiceReference1.LibNews news, string[] categoryes, string nameRest) {
            base.Channel.CreateNewWithCatAndRest(news, categoryes, nameRest);
        }
        
        public System.Threading.Tasks.Task CreateNewWithCatAndRestAsync(Client.ServiceReference1.LibNews news, string[] categoryes, string nameRest) {
            return base.Channel.CreateNewWithCatAndRestAsync(news, categoryes, nameRest);
        }
        
        public Client.ServiceReference1.LibNews[] SelectNewsFromRestoran(string nameRest) {
            return base.Channel.SelectNewsFromRestoran(nameRest);
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference1.LibNews[]> SelectNewsFromRestoranAsync(string nameRest) {
            return base.Channel.SelectNewsFromRestoranAsync(nameRest);
        }
        
        public string[] SelectRestorans() {
            return base.Channel.SelectRestorans();
        }
        
        public System.Threading.Tasks.Task<string[]> SelectRestoransAsync() {
            return base.Channel.SelectRestoransAsync();
        }
    }
}
